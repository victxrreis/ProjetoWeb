// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PrintersApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241119164142_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SelbId")
                        .HasColumnType("int");

                    b.Property<string>("SelbValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TonnerColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SelbId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Printer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Printers");
                });

            modelBuilder.Entity("Selb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("PrinterId")
                        .HasColumnType("int");

                    b.Property<string>("SelbValue")
                        .HasColumnType("longtext");

                    b.Property<int?>("TonnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrinterId");

                    b.HasIndex("TonnerId");

                    b.ToTable("Selbs");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExternalLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SelbId")
                        .HasColumnType("int");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SelbId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Tonner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SelbValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tonners");
                });

            modelBuilder.Entity("Loan", b =>
                {
                    b.HasOne("Selb", null)
                        .WithMany("Loans")
                        .HasForeignKey("SelbId");
                });

            modelBuilder.Entity("Selb", b =>
                {
                    b.HasOne("Printer", "Printer")
                        .WithMany()
                        .HasForeignKey("PrinterId");

                    b.HasOne("Tonner", "Tonner")
                        .WithMany()
                        .HasForeignKey("TonnerId");

                    b.Navigation("Printer");

                    b.Navigation("Tonner");
                });

            modelBuilder.Entity("Ticket", b =>
                {
                    b.HasOne("Selb", null)
                        .WithMany("Tickets")
                        .HasForeignKey("SelbId");
                });

            modelBuilder.Entity("Selb", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
